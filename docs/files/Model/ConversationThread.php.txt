<?php
/**
* Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
* 
* ConversationThread File
* PHP version 7
*
* @category  Library
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   GIT: 0.1.0
* @link      https://graph.microsoft.io/
*/
namespace Microsoft\Graph\Model;

/**
* ConversationThread class
*
* @category  Model
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   Release: 0.1.0
* @link      https://graph.microsoft.io/
*/
class ConversationThread
{
    /**
    * The array of properties available
    * to the model
    *
    * @var array(string => string)
    */
    private $_propDict;
    /**
    * Construct a new ConversationThread
    *
    * @param array $propDict A list of properties to set
    */
    function __construct($propDict = array())
    {
        $this->_propDict = $propDict;
    }

    /**
    * Gets the property dictionary of the ConversationThread
    *
    * @return array The list of properties
    */
    public function getProperties()
    {
        return $this->_propDict;
    }

    /** 
    * Gets the toRecipients
    *
    * @return ToRecipientsCollectionPage The toRecipients
    */
    public function getToRecipients()
    {
        if (array_key_exists("toRecipients", $this->_propDict)) {
            return ToRecipientsCollectionPage($this->_propDict["toRecipients"]);
        } else {
            return null;
        }
    }


    /**
    * Gets the topic
    *
    * @return string The topic
    */
    public function getTopic()
    {
        if (array_key_exists("topic", $this->_propDict)) {
            return $this->_propDict["topic"];
        } else {
            return null;
        }
    }

    /**
    * Sets the topic
    *
    * @param string $val The topic
    *
    * @return null
    */
    public function setTopic($val)
    {
        $this->propDict["topic"] = $val;
    }

    /**
    * Gets the hasAttachments
    *
    * @return bool The hasAttachments
    */
    public function getHasAttachments()
    {
        if (array_key_exists("hasAttachments", $this->_propDict)) {
            return $this->_propDict["hasAttachments"];
        } else {
            return null;
        }
    }

    /**
    * Sets the hasAttachments
    *
    * @param bool $val The hasAttachments
    *
    * @return null
    */
    public function setHasAttachments($val)
    {
        $this->propDict["hasAttachments"] = boolval($val);
    }

    /**
    * Gets the lastDeliveredDateTime
    *
    * @return datetime The lastDeliveredDateTime
    */
    public function getLastDeliveredDateTime()
    {
        if (array_key_exists("lastDeliveredDateTime", $this->_propDict)) {
            return new \DateTime($this->_propDict["lastDeliveredDateTime"]);
        } else {
            return null;
        }
    }

    /**
    * Sets the lastDeliveredDateTime
    *
    * @param datetime $val The lastDeliveredDateTime
    *
    * @return null
    */
    public function setLastDeliveredDateTime($val)
    {
        $this->_propDict["lastDeliveredDateTime"] 
            = $val->format(\DateTime::ISO8601) . "Z";
    }

    /**
    * Gets the uniqueSenders
    *
    * @return string The uniqueSenders
    */
    public function getUniqueSenders()
    {
        if (array_key_exists("uniqueSenders", $this->_propDict)) {
            return $this->_propDict["uniqueSenders"];
        } else {
            return null;
        }
    }

    /**
    * Sets the uniqueSenders
    *
    * @param string $val The uniqueSenders
    *
    * @return null
    */
    public function setUniqueSenders($val)
    {
        $this->propDict["uniqueSenders"] = $val;
    }

    /** 
    * Gets the ccRecipients
    *
    * @return CcRecipientsCollectionPage The ccRecipients
    */
    public function getCcRecipients()
    {
        if (array_key_exists("ccRecipients", $this->_propDict)) {
            return CcRecipientsCollectionPage($this->_propDict["ccRecipients"]);
        } else {
            return null;
        }
    }


    /**
    * Gets the preview
    *
    * @return string The preview
    */
    public function getPreview()
    {
        if (array_key_exists("preview", $this->_propDict)) {
            return $this->_propDict["preview"];
        } else {
            return null;
        }
    }

    /**
    * Sets the preview
    *
    * @param string $val The preview
    *
    * @return null
    */
    public function setPreview($val)
    {
        $this->propDict["preview"] = $val;
    }

    /**
    * Gets the isLocked
    *
    * @return bool The isLocked
    */
    public function getIsLocked()
    {
        if (array_key_exists("isLocked", $this->_propDict)) {
            return $this->_propDict["isLocked"];
        } else {
            return null;
        }
    }

    /**
    * Sets the isLocked
    *
    * @param bool $val The isLocked
    *
    * @return null
    */
    public function setIsLocked($val)
    {
        $this->propDict["isLocked"] = boolval($val);
    }

    /** 
    * Gets the posts
    *
    * @return PostsCollectionPage The posts
    */
    public function getPosts()
    {
        if (array_key_exists("posts", $this->_propDict)) {
            return PostsCollectionPage($this->_propDict["posts"]);
        } else {
            return null;
        }
    }

}
