<?php
/**
* Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
* 
* Attachment File
* PHP version 7
*
* @category  Library
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   GIT: 0.1.0
* @link      https://graph.microsoft.io/
*/
namespace Microsoft\Graph\Model;

/**
* Attachment class
*
* @category  Model
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   Release: 0.1.0
* @link      https://graph.microsoft.io/
*/
class Attachment
{
    /**
    * The array of properties available
    * to the model
    *
    * @var array(string => string)
    */
    private $_propDict;
    /**
    * Construct a new Attachment
    *
    * @param array $propDict A list of properties to set
    */
    function __construct($propDict = array())
    {
        $this->_propDict = $propDict;
    }

    /**
    * Gets the property dictionary of the Attachment
    *
    * @return array The list of properties
    */
    public function getProperties()
    {
        return $this->_propDict;
    }

    /**
    * Gets the lastModifiedDateTime
    *
    * @return datetime The lastModifiedDateTime
    */
    public function getLastModifiedDateTime()
    {
        if (array_key_exists("lastModifiedDateTime", $this->_propDict)) {
            return new \DateTime($this->_propDict["lastModifiedDateTime"]);
        } else {
            return null;
        }
    }

    /**
    * Sets the lastModifiedDateTime
    *
    * @param datetime $val The lastModifiedDateTime
    *
    * @return null
    */
    public function setLastModifiedDateTime($val)
    {
        $this->_propDict["lastModifiedDateTime"] 
            = $val->format(\DateTime::ISO8601) . "Z";
    }

    /**
    * Gets the name
    *
    * @return string The name
    */
    public function getName()
    {
        if (array_key_exists("name", $this->_propDict)) {
            return $this->_propDict["name"];
        } else {
            return null;
        }
    }

    /**
    * Sets the name
    *
    * @param string $val The name
    *
    * @return null
    */
    public function setName($val)
    {
        $this->propDict["name"] = $val;
    }

    /**
    * Gets the contentType
    *
    * @return string The contentType
    */
    public function getContentType()
    {
        if (array_key_exists("contentType", $this->_propDict)) {
            return $this->_propDict["contentType"];
        } else {
            return null;
        }
    }

    /**
    * Sets the contentType
    *
    * @param string $val The contentType
    *
    * @return null
    */
    public function setContentType($val)
    {
        $this->propDict["contentType"] = $val;
    }

    /**
    * Gets the size
    *
    * @return int The size
    */
    public function getSize()
    {
        if (array_key_exists("size", $this->_propDict)) {
            return $this->_propDict["size"];
        } else {
            return null;
        }
    }

    /**
    * Sets the size
    *
    * @param int $val The size
    *
    * @return null
    */
    public function setSize($val)
    {
        $this->propDict["size"] = intval($val);
    }

    /**
    * Gets the isInline
    *
    * @return bool The isInline
    */
    public function getIsInline()
    {
        if (array_key_exists("isInline", $this->_propDict)) {
            return $this->_propDict["isInline"];
        } else {
            return null;
        }
    }

    /**
    * Sets the isInline
    *
    * @param bool $val The isInline
    *
    * @return null
    */
    public function setIsInline($val)
    {
        $this->propDict["isInline"] = boolval($val);
    }
}
