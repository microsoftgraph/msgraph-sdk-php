<?php
/**
* Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
* 
* Group File
* PHP version 7
*
* @category  Library
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   GIT: 0.1.0
* @link      https://graph.microsoft.io/
*/
namespace Microsoft\Graph\Model;

/**
* Group class
*
* @category  Model
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   Release: 0.1.0
* @link      https://graph.microsoft.io/
*/
class Group
{
    /**
    * The array of properties available
    * to the model
    *
    * @var array(string => string)
    */
    private $_propDict;
    /**
    * Construct a new Group
    *
    * @param array $propDict A list of properties to set
    */
    function __construct($propDict = array())
    {
        $this->_propDict = $propDict;
    }

    /**
    * Gets the property dictionary of the Group
    *
    * @return array The list of properties
    */
    public function getProperties()
    {
        return $this->_propDict;
    }

    /**
    * Gets the description
    *
    * @return string The description
    */
    public function getDescription()
    {
        if (array_key_exists("description", $this->_propDict)) {
            return $this->_propDict["description"];
        } else {
            return null;
        }
    }

    /**
    * Sets the description
    *
    * @param string $val The description
    *
    * @return null
    */
    public function setDescription($val)
    {
        $this->propDict["description"] = $val;
    }

    /**
    * Gets the displayName
    *
    * @return string The displayName
    */
    public function getDisplayName()
    {
        if (array_key_exists("displayName", $this->_propDict)) {
            return $this->_propDict["displayName"];
        } else {
            return null;
        }
    }

    /**
    * Sets the displayName
    *
    * @param string $val The displayName
    *
    * @return null
    */
    public function setDisplayName($val)
    {
        $this->propDict["displayName"] = $val;
    }

    /**
    * Gets the groupTypes
    *
    * @return string The groupTypes
    */
    public function getGroupTypes()
    {
        if (array_key_exists("groupTypes", $this->_propDict)) {
            return $this->_propDict["groupTypes"];
        } else {
            return null;
        }
    }

    /**
    * Sets the groupTypes
    *
    * @param string $val The groupTypes
    *
    * @return null
    */
    public function setGroupTypes($val)
    {
        $this->propDict["groupTypes"] = $val;
    }

    /**
    * Gets the mail
    *
    * @return string The mail
    */
    public function getMail()
    {
        if (array_key_exists("mail", $this->_propDict)) {
            return $this->_propDict["mail"];
        } else {
            return null;
        }
    }

    /**
    * Sets the mail
    *
    * @param string $val The mail
    *
    * @return null
    */
    public function setMail($val)
    {
        $this->propDict["mail"] = $val;
    }

    /**
    * Gets the mailEnabled
    *
    * @return bool The mailEnabled
    */
    public function getMailEnabled()
    {
        if (array_key_exists("mailEnabled", $this->_propDict)) {
            return $this->_propDict["mailEnabled"];
        } else {
            return null;
        }
    }

    /**
    * Sets the mailEnabled
    *
    * @param bool $val The mailEnabled
    *
    * @return null
    */
    public function setMailEnabled($val)
    {
        $this->propDict["mailEnabled"] = boolval($val);
    }

    /**
    * Gets the mailNickname
    *
    * @return string The mailNickname
    */
    public function getMailNickname()
    {
        if (array_key_exists("mailNickname", $this->_propDict)) {
            return $this->_propDict["mailNickname"];
        } else {
            return null;
        }
    }

    /**
    * Sets the mailNickname
    *
    * @param string $val The mailNickname
    *
    * @return null
    */
    public function setMailNickname($val)
    {
        $this->propDict["mailNickname"] = $val;
    }

    /**
    * Gets the onPremisesLastSyncDateTime
    *
    * @return datetime The onPremisesLastSyncDateTime
    */
    public function getOnPremisesLastSyncDateTime()
    {
        if (array_key_exists("onPremisesLastSyncDateTime", $this->_propDict)) {
            return new \DateTime($this->_propDict["onPremisesLastSyncDateTime"]);
        } else {
            return null;
        }
    }

    /**
    * Sets the onPremisesLastSyncDateTime
    *
    * @param datetime $val The onPremisesLastSyncDateTime
    *
    * @return null
    */
    public function setOnPremisesLastSyncDateTime($val)
    {
        $this->_propDict["onPremisesLastSyncDateTime"] 
            = $val->format(\DateTime::ISO8601) . "Z";
    }

    /**
    * Gets the onPremisesSecurityIdentifier
    *
    * @return string The onPremisesSecurityIdentifier
    */
    public function getOnPremisesSecurityIdentifier()
    {
        if (array_key_exists("onPremisesSecurityIdentifier", $this->_propDict)) {
            return $this->_propDict["onPremisesSecurityIdentifier"];
        } else {
            return null;
        }
    }

    /**
    * Sets the onPremisesSecurityIdentifier
    *
    * @param string $val The onPremisesSecurityIdentifier
    *
    * @return null
    */
    public function setOnPremisesSecurityIdentifier($val)
    {
        $this->propDict["onPremisesSecurityIdentifier"] = $val;
    }

    /**
    * Gets the onPremisesSyncEnabled
    *
    * @return bool The onPremisesSyncEnabled
    */
    public function getOnPremisesSyncEnabled()
    {
        if (array_key_exists("onPremisesSyncEnabled", $this->_propDict)) {
            return $this->_propDict["onPremisesSyncEnabled"];
        } else {
            return null;
        }
    }

    /**
    * Sets the onPremisesSyncEnabled
    *
    * @param bool $val The onPremisesSyncEnabled
    *
    * @return null
    */
    public function setOnPremisesSyncEnabled($val)
    {
        $this->propDict["onPremisesSyncEnabled"] = boolval($val);
    }

    /**
    * Gets the proxyAddresses
    *
    * @return string The proxyAddresses
    */
    public function getProxyAddresses()
    {
        if (array_key_exists("proxyAddresses", $this->_propDict)) {
            return $this->_propDict["proxyAddresses"];
        } else {
            return null;
        }
    }

    /**
    * Sets the proxyAddresses
    *
    * @param string $val The proxyAddresses
    *
    * @return null
    */
    public function setProxyAddresses($val)
    {
        $this->propDict["proxyAddresses"] = $val;
    }

    /**
    * Gets the securityEnabled
    *
    * @return bool The securityEnabled
    */
    public function getSecurityEnabled()
    {
        if (array_key_exists("securityEnabled", $this->_propDict)) {
            return $this->_propDict["securityEnabled"];
        } else {
            return null;
        }
    }

    /**
    * Sets the securityEnabled
    *
    * @param bool $val The securityEnabled
    *
    * @return null
    */
    public function setSecurityEnabled($val)
    {
        $this->propDict["securityEnabled"] = boolval($val);
    }

    /**
    * Gets the visibility
    *
    * @return string The visibility
    */
    public function getVisibility()
    {
        if (array_key_exists("visibility", $this->_propDict)) {
            return $this->_propDict["visibility"];
        } else {
            return null;
        }
    }

    /**
    * Sets the visibility
    *
    * @param string $val The visibility
    *
    * @return null
    */
    public function setVisibility($val)
    {
        $this->propDict["visibility"] = $val;
    }

    /**
    * Gets the allowExternalSenders
    *
    * @return bool The allowExternalSenders
    */
    public function getAllowExternalSenders()
    {
        if (array_key_exists("allowExternalSenders", $this->_propDict)) {
            return $this->_propDict["allowExternalSenders"];
        } else {
            return null;
        }
    }

    /**
    * Sets the allowExternalSenders
    *
    * @param bool $val The allowExternalSenders
    *
    * @return null
    */
    public function setAllowExternalSenders($val)
    {
        $this->propDict["allowExternalSenders"] = boolval($val);
    }

    /**
    * Gets the autoSubscribeNewMembers
    *
    * @return bool The autoSubscribeNewMembers
    */
    public function getAutoSubscribeNewMembers()
    {
        if (array_key_exists("autoSubscribeNewMembers", $this->_propDict)) {
            return $this->_propDict["autoSubscribeNewMembers"];
        } else {
            return null;
        }
    }

    /**
    * Sets the autoSubscribeNewMembers
    *
    * @param bool $val The autoSubscribeNewMembers
    *
    * @return null
    */
    public function setAutoSubscribeNewMembers($val)
    {
        $this->propDict["autoSubscribeNewMembers"] = boolval($val);
    }

    /**
    * Gets the isSubscribedByMail
    *
    * @return bool The isSubscribedByMail
    */
    public function getIsSubscribedByMail()
    {
        if (array_key_exists("isSubscribedByMail", $this->_propDict)) {
            return $this->_propDict["isSubscribedByMail"];
        } else {
            return null;
        }
    }

    /**
    * Sets the isSubscribedByMail
    *
    * @param bool $val The isSubscribedByMail
    *
    * @return null
    */
    public function setIsSubscribedByMail($val)
    {
        $this->propDict["isSubscribedByMail"] = boolval($val);
    }

    /**
    * Gets the unseenCount
    *
    * @return int The unseenCount
    */
    public function getUnseenCount()
    {
        if (array_key_exists("unseenCount", $this->_propDict)) {
            return $this->_propDict["unseenCount"];
        } else {
            return null;
        }
    }

    /**
    * Sets the unseenCount
    *
    * @param int $val The unseenCount
    *
    * @return null
    */
    public function setUnseenCount($val)
    {
        $this->propDict["unseenCount"] = intval($val);
    }

    /** 
    * Gets the members
    *
    * @return MembersCollectionPage The members
    */
    public function getMembers()
    {
        if (array_key_exists("members", $this->_propDict)) {
            return MembersCollectionPage($this->_propDict["members"]);
        } else {
            return null;
        }
    }


    /** 
    * Gets the memberOf
    *
    * @return MemberOfCollectionPage The memberOf
    */
    public function getMemberOf()
    {
        if (array_key_exists("memberOf", $this->_propDict)) {
            return MemberOfCollectionPage($this->_propDict["memberOf"]);
        } else {
            return null;
        }
    }


    /**
    * Gets the createdOnBehalfOf
    *
    * @return DirectoryObject The createdOnBehalfOf
    */
    public function getCreatedOnBehalfOf()
    {
        if (array_key_exists("createdOnBehalfOf", $this->_propDict)) {
            if (is_a($this->_propDict["createdOnBehalfOf"], 'DirectoryObject')) {
                return $this->_propDict["createdOnBehalfOf"];
            } else {
                $this->_propDict["createdOnBehalfOf"] = new DirectoryObject($this->_propDict["createdOnBehalfOf"]);
                return $this->_propDict["createdOnBehalfOf"];
            }
        }
        return null;
    }

    /**
    * Sets the createdOnBehalfOf
    *
    * @param string $val The createdOnBehalfOf
    *
    * @return null
    */
    public function setCreatedOnBehalfOf($val)
    {
        $this->propDict["createdOnBehalfOf"] = $val;
    }

    /** 
    * Gets the owners
    *
    * @return OwnersCollectionPage The owners
    */
    public function getOwners()
    {
        if (array_key_exists("owners", $this->_propDict)) {
            return OwnersCollectionPage($this->_propDict["owners"]);
        } else {
            return null;
        }
    }


    /** 
    * Gets the threads
    *
    * @return ThreadsCollectionPage The threads
    */
    public function getThreads()
    {
        if (array_key_exists("threads", $this->_propDict)) {
            return ThreadsCollectionPage($this->_propDict["threads"]);
        } else {
            return null;
        }
    }


    /**
    * Gets the calendar
    *
    * @return Calendar The calendar
    */
    public function getCalendar()
    {
        if (array_key_exists("calendar", $this->_propDict)) {
            if (is_a($this->_propDict["calendar"], 'Calendar')) {
                return $this->_propDict["calendar"];
            } else {
                $this->_propDict["calendar"] = new Calendar($this->_propDict["calendar"]);
                return $this->_propDict["calendar"];
            }
        }
        return null;
    }

    /**
    * Sets the calendar
    *
    * @param string $val The calendar
    *
    * @return null
    */
    public function setCalendar($val)
    {
        $this->propDict["calendar"] = $val;
    }

    /** 
    * Gets the calendarView
    *
    * @return CalendarViewCollectionPage The calendarView
    */
    public function getCalendarView()
    {
        if (array_key_exists("calendarView", $this->_propDict)) {
            return CalendarViewCollectionPage($this->_propDict["calendarView"]);
        } else {
            return null;
        }
    }


    /** 
    * Gets the events
    *
    * @return EventsCollectionPage The events
    */
    public function getEvents()
    {
        if (array_key_exists("events", $this->_propDict)) {
            return EventsCollectionPage($this->_propDict["events"]);
        } else {
            return null;
        }
    }


    /** 
    * Gets the conversations
    *
    * @return ConversationsCollectionPage The conversations
    */
    public function getConversations()
    {
        if (array_key_exists("conversations", $this->_propDict)) {
            return ConversationsCollectionPage($this->_propDict["conversations"]);
        } else {
            return null;
        }
    }


    /**
    * Gets the photo
    *
    * @return ProfilePhoto The photo
    */
    public function getPhoto()
    {
        if (array_key_exists("photo", $this->_propDict)) {
            if (is_a($this->_propDict["photo"], 'ProfilePhoto')) {
                return $this->_propDict["photo"];
            } else {
                $this->_propDict["photo"] = new ProfilePhoto($this->_propDict["photo"]);
                return $this->_propDict["photo"];
            }
        }
        return null;
    }

    /**
    * Sets the photo
    *
    * @param string $val The photo
    *
    * @return null
    */
    public function setPhoto($val)
    {
        $this->propDict["photo"] = $val;
    }

    /** 
    * Gets the acceptedSenders
    *
    * @return AcceptedSendersCollectionPage The acceptedSenders
    */
    public function getAcceptedSenders()
    {
        if (array_key_exists("acceptedSenders", $this->_propDict)) {
            return AcceptedSendersCollectionPage($this->_propDict["acceptedSenders"]);
        } else {
            return null;
        }
    }


    /** 
    * Gets the rejectedSenders
    *
    * @return RejectedSendersCollectionPage The rejectedSenders
    */
    public function getRejectedSenders()
    {
        if (array_key_exists("rejectedSenders", $this->_propDict)) {
            return RejectedSendersCollectionPage($this->_propDict["rejectedSenders"]);
        } else {
            return null;
        }
    }


    /**
    * Gets the drive
    *
    * @return Drive The drive
    */
    public function getDrive()
    {
        if (array_key_exists("drive", $this->_propDict)) {
            if (is_a($this->_propDict["drive"], 'Drive')) {
                return $this->_propDict["drive"];
            } else {
                $this->_propDict["drive"] = new Drive($this->_propDict["drive"]);
                return $this->_propDict["drive"];
            }
        }
        return null;
    }

    /**
    * Sets the drive
    *
    * @param string $val The drive
    *
    * @return null
    */
    public function setDrive($val)
    {
        $this->propDict["drive"] = $val;
    }
}
