<?php
/**
* Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
* 
* Photo File
* PHP version 7
*
* @category  Library
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   GIT: 0.1.0
* @link      https://graph.microsoft.io/
*/
namespace Microsoft\Graph\Model;
/**
* Photo class
*
* @category  Model
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   Release: 0.1.0
* @link      https://graph.microsoft.io/
*/
class Photo
{
    /**
    * The array of properties available 
    * to the model
    *
    * @var array(string => string)
    */
    private $_propDict;
    /**
    * Photo constructor
    *
    * @param array $propDict List of properties to set
    * Defaults to an empty array
    *
    * @return null
    */
    public function __construct($propDict=array())
    {
        $this->_propDict = $propDict;
    }
    
    /**
    * Gets the cameraMake
    *
    * @return string The cameraMake
    */
    public function getCameraMake()
    {
        if (array_key_exists("cameraMake", $this->propDict)) {
            return $this->propDict["cameraMake"];
        } else {
            return null;
        }
    }

    /**
    * Sets the cameraMake
    *
    * @param string $val The value of the cameraMake
    *
    * @return null
    */
    public function setCameraMake($val)
    {
        $this->_propDict["camera_make"] = $val;
    }
    
    /**
    * Gets the cameraModel
    *
    * @return string The cameraModel
    */
    public function getCameraModel()
    {
        if (array_key_exists("cameraModel", $this->propDict)) {
            return $this->propDict["cameraModel"];
        } else {
            return null;
        }
    }

    /**
    * Sets the cameraModel
    *
    * @param string $val The value of the cameraModel
    *
    * @return null
    */
    public function setCameraModel($val)
    {
        $this->_propDict["camera_model"] = $val;
    }
    
    /**
    * Gets the exposureDenominator
    *
    * @return float The exposureDenominator
    */
    public function getExposureDenominator()
    {
        if (array_key_exists("exposureDenominator", $this->propDict)) {
            return $this->propDict["exposureDenominator"];
        } else {
            return null;
        }
    }

    /**
    * Sets the exposureDenominator
    *
    * @param float $val The value of the exposureDenominator
    *
    * @return null
    */
    public function setExposureDenominator($val)
    {
        $this->_propDict["exposure_denominator"] = $val;
    }
    
    /**
    * Gets the exposureNumerator
    *
    * @return float The exposureNumerator
    */
    public function getExposureNumerator()
    {
        if (array_key_exists("exposureNumerator", $this->propDict)) {
            return $this->propDict["exposureNumerator"];
        } else {
            return null;
        }
    }

    /**
    * Sets the exposureNumerator
    *
    * @param float $val The value of the exposureNumerator
    *
    * @return null
    */
    public function setExposureNumerator($val)
    {
        $this->_propDict["exposure_numerator"] = $val;
    }
    
    /**
    * Gets the focalLength
    *
    * @return float The focalLength
    */
    public function getFocalLength()
    {
        if (array_key_exists("focalLength", $this->propDict)) {
            return $this->propDict["focalLength"];
        } else {
            return null;
        }
    }

    /**
    * Sets the focalLength
    *
    * @param float $val The value of the focalLength
    *
    * @return null
    */
    public function setFocalLength($val)
    {
        $this->_propDict["focal_length"] = $val;
    }
    
    /**
    * Gets the fNumber
    *
    * @return float The fNumber
    */
    public function getFNumber()
    {
        if (array_key_exists("fNumber", $this->propDict)) {
            return $this->propDict["fNumber"];
        } else {
            return null;
        }
    }

    /**
    * Sets the fNumber
    *
    * @param float $val The value of the fNumber
    *
    * @return null
    */
    public function setFNumber($val)
    {
        $this->_propDict["f_number"] = $val;
    }
    
    /**
    * Gets the takenDateTime
    *
    * @return datetime The takenDateTime
    */
    public function getTakenDateTime()
    {
        if (array_key_exists("takenDateTime", $this->propDict)) {
            return new \DateTime($this->_propDict["takenDateTime"]);
        } else {
            return null;
        }
    }

    /**
    * Sets the takenDateTime
    *
    * @param datetime $val The value of the takenDateTime
    *
    * @return null
    */
    public function setTakenDateTime($val)
    {
        $this->_propDict["taken_date_time"] 
            = $val->format(\DateTime::ISO8601) . "Z";
    }
    
    /**
    * Gets the iso
    *
    * @return int The iso
    */
    public function getIso()
    {
        if (array_key_exists("iso", $this->propDict)) {
            return $this->propDict["iso"];
        } else {
            return null;
        }
    }

    /**
    * Sets the iso
    *
    * @param int $val The value of the iso
    *
    * @return null
    */
    public function setIso($val)
    {
        $this->_propDict["iso"] = $val;
    }
}

