<?php
/**
* Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
* 
* RecurrenceRange File
* PHP version 7
*
* @category  Library
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   GIT: 0.1.0
* @link      https://graph.microsoft.io/
*/
namespace Microsoft\Graph\Model;
/**
* RecurrenceRange class
*
* @category  Model
* @package   Microsoft.Graph
* @author    Caitlin Bales <caitbal@microsoft.com>
* @copyright 2016 Microsoft Corporation
* @license   https://opensource.org/licenses/MIT MIT License
* @version   Release: 0.1.0
* @link      https://graph.microsoft.io/
*/
class RecurrenceRange
{
    /**
    * The array of properties available 
    * to the model
    *
    * @var array(string => string)
    */
    private $_propDict;
    /**
    * RecurrenceRange constructor
    *
    * @param array $propDict List of properties to set
    * Defaults to an empty array
    *
    * @return null
    */
    public function __construct($propDict=array())
    {
        $this->_propDict = $propDict;
    }

    /**
    * Gets the type
    *
    * @return RecurrenceRangeType The type
    */
    public function getType()
    {
        if (array_key_exists("type", $this->propDict)) {
            if (is_a($this->propDict["type"], 'RecurrenceRangeType')) {
                return $this->propDict["type"];
            } else {
                $this->propDict["type"] = new RecurrenceRangeType($this->propDict["type"]);
                return $this->propDict["type"];
            }
        }
        return null;
    }

    /**
    * Sets the type
    *
    * @param RecurrenceRangeType $val The value to assign to the type
    *
    * @return null
    */
    public function setType($val)
    {
        $this->propDict["type"] = $val;
    }

    /**
    * Gets the startDate
    *
    * @return Date The startDate
    */
    public function getStartDate()
    {
        if (array_key_exists("startDate", $this->propDict)) {
            if (is_a($this->propDict["startDate"], 'Date')) {
                return $this->propDict["startDate"];
            } else {
                $this->propDict["startDate"] = new Date($this->propDict["startDate"]);
                return $this->propDict["startDate"];
            }
        }
        return null;
    }

    /**
    * Sets the startDate
    *
    * @param Date $val The value to assign to the startDate
    *
    * @return null
    */
    public function setStartDate($val)
    {
        $this->propDict["startDate"] = $val;
    }

    /**
    * Gets the endDate
    *
    * @return Date The endDate
    */
    public function getEndDate()
    {
        if (array_key_exists("endDate", $this->propDict)) {
            if (is_a($this->propDict["endDate"], 'Date')) {
                return $this->propDict["endDate"];
            } else {
                $this->propDict["endDate"] = new Date($this->propDict["endDate"]);
                return $this->propDict["endDate"];
            }
        }
        return null;
    }

    /**
    * Sets the endDate
    *
    * @param Date $val The value to assign to the endDate
    *
    * @return null
    */
    public function setEndDate($val)
    {
        $this->propDict["endDate"] = $val;
    }
    
    /**
    * Gets the recurrenceTimeZone
    *
    * @return string The recurrenceTimeZone
    */
    public function getRecurrenceTimeZone()
    {
        if (array_key_exists("recurrenceTimeZone", $this->propDict)) {
            return $this->propDict["recurrenceTimeZone"];
        } else {
            return null;
        }
    }

    /**
    * Sets the recurrenceTimeZone
    *
    * @param string $val The value of the recurrenceTimeZone
    *
    * @return null
    */
    public function setRecurrenceTimeZone($val)
    {
        $this->_propDict["recurrence_time_zone"] = $val;
    }
    
    /**
    * Gets the numberOfOccurrences
    *
    * @return int The numberOfOccurrences
    */
    public function getNumberOfOccurrences()
    {
        if (array_key_exists("numberOfOccurrences", $this->propDict)) {
            return $this->propDict["numberOfOccurrences"];
        } else {
            return null;
        }
    }

    /**
    * Sets the numberOfOccurrences
    *
    * @param int $val The value of the numberOfOccurrences
    *
    * @return null
    */
    public function setNumberOfOccurrences($val)
    {
        $this->_propDict["number_of_occurrences"] = $val;
    }
}

